{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { getToken } from \"next-auth/jwt\";\n\nexport async function middleware(request) {\n  console.log(\"Middleware executing for path:\", request.nextUrl.pathname);\n\n  try {\n    const token = await getToken({\n      req: request,\n      secret: process.env.AUTH_SECRET,\n      raw: true,\n    });\n\n    console.log(\"Middleware token:\", token);\n\n    if (!token) {\n      console.log(\"Invalid token, redirecting to login\");\n      return NextResponse.redirect(new URL(\"/login\", request.url));\n    }\n\n    console.log(\"Valid token found, continuing to protected route\");\n    return NextResponse.next();\n  } catch (error) {\n    console.error(\"Middleware error:\", error);\n    return NextResponse.redirect(new URL(\"/login\", request.url));\n  }\n}\nexport const config = {\n  matcher: [\n    \"/dashboard/addRecipe/:path*\",\n    \"/dashboard/myRecipe/:path*\",\n    \"/dashboard/:path*\",\n  ],\n};\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AACA;AAAA;;;AAEO,eAAe,WAAW,OAAO;IACtC,QAAQ,GAAG,CAAC,kCAAkC,QAAQ,OAAO,CAAC,QAAQ;IAEtE,IAAI;QACF,MAAM,QAAQ,MAAM,IAAA,yJAAQ,EAAC;YAC3B,KAAK;YACL,QAAQ,QAAQ,GAAG,CAAC,WAAW;YAC/B,KAAK;QACP;QAEA,QAAQ,GAAG,CAAC,qBAAqB;QAEjC,IAAI,CAAC,OAAO;YACV,QAAQ,GAAG,CAAC;YACZ,OAAO,gMAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;QAC5D;QAEA,QAAQ,GAAG,CAAC;QACZ,OAAO,gMAAY,CAAC,IAAI;IAC1B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gMAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;IAC5D;AACF;AACO,MAAM,SAAS;IACpB,SAAS;QACP;QACA;QACA;KACD;AACH"}}]
}