{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///E:/ProgrammingHero/Milestone_10/Module_57/recipe-book/auth.js"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport Google from \"next-auth/providers/google\";\nimport Credentials from \"next-auth/providers/credentials\";\n// import { MongoDBAdapter } from \"@auth/mongodb-adapter\";\n// import clientPromise from \"./lib/db\";\n\nexport const authConfig = {\n  session: { strategy: \"jwt\" },\n  pages: { signIn: \"/login\" },\n  providers: [\n    Google,\n    Credentials({\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      authorize: async (credentials) => {\n        try {\n          const res = await fetch(\n            `${process.env.NEXT_PUBLIC_API_URL}/auth/login`,\n            {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify({\n                email: credentials.email,\n                password: credentials.password,\n              }),\n            }\n          );\n\n          if (!res.ok) {\n            const error = await res.json();\n            throw new Error(error.message || \"Invalid credentials\");\n          }\n\n          const data = await res.json();\n          //   console.log(\"Login response:\", data);\n\n          return {\n            id: data.user.id,\n            name: data.user.name,\n            email: data.user.email,\n            image: data.user?.image,\n            role: data.user.role,\n            accessToken: data.accessToken,\n            refreshToken: data.refreshToken,\n          };\n        } catch (error) {\n          console.error(\"Authorization error:\", error);\n          return null;\n        }\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user, account, profile }) {\n      // First-time sign-in (credentials)\n      if (user) {\n        token.role = user.role;\n        token.accessToken = user.accessToken;\n        token.refreshToken = user.refreshToken;\n      }\n\n          if (account && account.provider === \"google\") {\n        //   console.log(profile);\n        try {\n          const res = await fetch(\n            `${process.env.NEXT_PUBLIC_API_URL}/auth/google`,\n            {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify({\n                idToked: account.id_token, //from google\n                email: profile?.email, //from google\n                name: profile?.name, //from google\n                avatar: profile?.image || profile?.picture, //from google\n              }),\n            }\n          );\n          if (res.ok) {\n              const data = await res.json();\n            //   console.log(data);\n            token.userId = data.user.id;\n            token.role = data.user.role;\n            token.picture = data.user.image ?? token.picture;\n            token.accessToken = data.accessToken;\n            token.refreshToken = data.refreshToken;\n          }\n        } catch (error) {}\n      }\n\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        session.user.role = token.role;\n        session.user.image = token.picture || token.image || session.user.image;\n        session.accessToken = token.accessToken;\n        session.refreshToken = token.refreshToken;\n      }\n      return session;\n    },\n  },\n};\n\nexport const { auth, handlers, signIn, signOut } = NextAuth(authConfig);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":["file:///E:/ProgrammingHero/Milestone_10/Module_57/recipe-book/app/api/auth/%5B...nextauth%5D/route.js"],"sourcesContent":["//api/auth/[...nextauth]/route.js\nimport { handlers } from \"@/auth\";\nexport const { GET, POST } = handlers;\n"],"names":[],"mappings":"AAAA,iCAAiC;;;;;;;AACjC;;AACO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,kHAAQ","debugId":null}}]
}